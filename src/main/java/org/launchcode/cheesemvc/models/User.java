package org.launchcode.cheesemvc.models;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Transient;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

/*
@Entity - Required for Hibernate to store/retrieve instances of the class to/from the database.
Every field of the class not marked @Transient will be stored in the database .

Every Hibernate-managed class needs a public constructor that takes no arguments. This class must have a public constructor with no arguments.
 */
@Entity
public class User {

    /*
    @Id - The field should be considered an identifier for the class.
    In particular, the corresponding column in the database should be a primary key

    @GeneratedValue - Specifies that the field should be generated by Hibernate.
    This annotation can be configured to use different value generation strategies.
    */

    @Id
    @GeneratedValue
    private int id;

    @NotNull
    @Size(min=1 , message="Username must not be empty")
    private String username;

    @Email
    private String email;

    @NotNull
    @Size(min=6 , message="Password must be at lest 6 character long")
    private String  password;

    @NotNull(message = "Passwords do not match")
    @Transient
    private String verifyPassword;

    public User(){

    }

    public User(String username, String email, String password) {
        this.username = username;
        this.email = email;
        this.password = password;
    }

    public int getId() {
        return id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
        checkPassword();
    }

    public String getVerifyPassword() {
        return verifyPassword;
    }

    public void setVerifyPassword(String verifyPassword) {
        this.verifyPassword = verifyPassword;
        checkPassword();
    }

    private void checkPassword(){
        if(password != null && verifyPassword != null){
            if ( ! password.equals(verifyPassword)){
                verifyPassword = null;
            }
        }
    }
}
